#!/usr/bin/env node
const fs = require("fs");
const { results } = JSON.parse(
  fs.readFileSync(process.argv.slice(2).flat()[0])
);
const filename = `${process.argv.slice(2).flat()[1]}`;

var earliestRecord = {};

const applyTags = (album) => {
  earliestRecord.artist = earliestRecord.ARTIST = album.artists[0].name;
  earliestRecord.album = earliestRecord.ALBUM = album.title;
  earliestRecord.disc = album.mediums[0].position;
  earliestRecord.tracknumber = earliestRecord.track =
    album.mediums[0].tracks[0].position;
  earliestRecord.title = earliestRecord.TITLE =
    album.mediums[0].tracks[0].title;
  earliestRecord.MUSICBRAINZ_ALBUMARTISTID = album.artists[0].id;
  earliestRecord.MUSICBRAINZ_TRACKID = album.mediums[0].tracks[0].id;
};

const eachIfDefined = (arr, cb) => {
  if (Array.isArray(arr) && typeof arr !== "undefined") {
    arr.forEach(cb);
  } else {
    return null;
  }
};

const getEarliestRelease = (results) => {
  var albums = [];
  // get only first result - they are returned by acoustID
  // in order of best score, so there's a chance a bad score
  // will give a "better" result which will give the wrong title.
  //
  // get all releases of type: "album"
  earliestRecord.ACOUSTID_ID = results[0].id;
  eachIfDefined(results[0].recordings, (recording) => {
    eachIfDefined(recording.releasegroups, (releasegroup) => {
      if (releasegroup.type.toLowerCase() == "album") {
        // albums.push(releasegroup.releases);
        eachIfDefined(releasegroup.releases, (release) => {
          if (release.date) {
            albums.push(release);
          }
        });
      }
    });
  });
  albums.forEach((album) => {
    // get earliest date.
    // some dates are only a year, so we first
    // check if there's a "day".
    if ("day" in album.date) {
      let date = `${("000" + album.date.year).slice(-4)}-${(
        "0" + album.date.month
      ).slice(-2)}-${("0" + album.date.day).slice(-2)}`;
      let dateObj = Date.parse(date);
      if ("epoch" in earliestRecord) {
        if (dateObj < earliestRecord.epoch) {
          // apply all the tags
          earliestRecord.date = earliestRecord.ORIGINALDATE = `${(
            "000" + album.date.year
          ).slice(-4)}-${("0" + album.date.month).slice(-2)}-${(
            "0" + album.date.day
          ).slice(-2)}`;
          earliestRecord.year = earliestRecord.ORIGINALYEAR = `${(
            "000" + album.date.year
          ).slice(-4)}`;
          earliestRecord.epoch = Date.parse(earliestRecord.ORIGINALDATE);
          applyTags(album);
          // console.log(JSON.stringify(album));
        }
      } else {
        // apply all the tags
        earliestRecord.date = earliestRecord.ORIGINALDATE = `${(
          "000" + album.date.year
        ).slice(-4)}-${("0" + album.date.month).slice(-2)}-${(
          "0" + album.date.day
        ).slice(-2)}`;
        earliestRecord.year = earliestRecord.ORIGINALYEAR = `${(
          "000" + album.date.year
        ).slice(-4)}`;
        earliestRecord.epoch = Date.parse(earliestRecord.ORIGINALDATE);
        applyTags(album);
      }
    }
  });
  delete earliestRecord.epoch;
  return earliestRecord;
};

const ffmpegCli = (tags) => {
  ext = filename.match(/.*\.(.*)$/)[1];
  string = "";
  Object.entries(tags).forEach((e) => {
    string += `-metadata ${e[0]}="${e[1]}" `;
  });
  // return `ffmpeg -i "${filename}" -c: copy ${string} "./${tags.ARTIST} - ${tags.ORIGINALYEAR} - ${tags.ALBUM}/${filename.split(".").slice(0, -1).join(".")}.tagged.opus"`;
  return `mkdir -p "./${tags.ARTIST} - ${tags.ORIGINALYEAR} - ${
    tags.ALBUM
  }" && ffmpeg -i "${filename}" -map_metadata -1 -c:a copy ${string} "./${tags.ARTIST} - ${
    tags.ORIGINALYEAR
  } - ${tags.ALBUM}/${tags.disc}.${("000" + tags.track).slice(-2)} - ${
    tags.TITLE
  }.${ext}" && rm "${filename}"`;
};

console.log(ffmpegCli(getEarliestRelease(results)));
// console.log(getEarliestRelease(results));
// console.log(
//   eachIfDefined(results, (result) => {
//     console.log(result);
//   })
// );
// console.log(
//   results.forEach((result) => {
//     console.log(result);
//   })
// );

// encoder         : Lavf58.59.100
// epoch           : 298252800000
// MUSICBRAINZ_ALBUMARTISTID: 9a58fda3-f4ed-4080-a3a5-f457aac9fcdd
// MUSICBRAINZ_RELEASETRACKID: cbc00f19-9e6a-3def-82f2-bbaa3bb74c4c
// MUSICBRAINZ_ALBUMID: 6219127c-bf4a-3699-a2f0-a97e8cc88d6e
// MUSICBRAINZ_ARTISTID: 9a58fda3-f4ed-4080-a3a5-f457aac9fcdd
// MUSICBRAINZ_RELEASEGROUPID: 42352def-1aab-3000-b548-895ebd869cb6
// MUSICBRAINZ_WORKID: 5bc9f75f-2497-326b-b945-ece7322e79e6
// MUSICBRAINZ_TRACKID: f962828d-b970-4d0c-9d4b-dcac8f064a89
// R128_TRACK_GAIN : -297
// R128_ALBUM_GAIN : 0
// BARCODE         : 731452001627
// PRODUCER        : Martin Hannett
// TITLE           : Disorder
// LYRICIST        : Ian Curtis
// RELEASECOUNTRY  : DE
// TOTALDISCS      : 1
// LABEL           : London Records 90
// TOTALTRACKS     : 10
// COMPOSERSORT    : Curtis, Ian;Hook, Peter;Morris, Stephen;Sumner, Bernard
// COMPOSER        : Ian Curtis;Peter Hook;Stephen Morris;Bernard Sumner
// DATE            : 1993-07-19
// disc            : 1
// TRACKTOTAL      : 10
// ASIN            : B000025JXM
// ALBUMARTISTSORT : Joy Division
// ORIGINALDATE    : 1979-06-15
// LANGUAGE        : eng
// SCRIPT          : Latn
// WORK            : Disorder
// RELEASESTATUS   : official
// album_artist    : Joy Division
// ACOUSTID_ID     : 1c07d447-8113-49db-a963-f473f24fc534
// CATALOGNUMBER   : 520016-2
// ENGINEER        : Chris Nagle
// ALBUM           : Unknown Pleasures
// MEDIA           : CD
// RELEASETYPE     : album
// ORIGINALYEAR    : 1979
// ISRC            : GBAAP9700168
// DISCTOTAL       : 1
// ARTIST          : Joy Division
// ARTISTSORT      : Joy Division
// ARTISTS         : Joy Division
// track           : 1
